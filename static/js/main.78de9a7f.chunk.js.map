{"version":3,"sources":["components/common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/My Posts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/common/FormsControls/FormsControl.module.css","components/Users/Users.module.css","reportWebVitals.ts","api/api.ts","redux/profileReduser.tsx","redux/dialogsReduser.tsx","redux/usersReduser.tsx","redux/authReduser.tsx","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","assets/loader.gif","components/common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My Posts/Post/Post.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControl.tsx","components/Profile/My Posts/MyPostsForm..tsx","components/Profile/My Posts/MyPostsContainer.tsx","components/Profile/My Posts/MyPosts.tsx","components/Profile/Profile.tsx","hoc/AuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm..tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","assets/images/avatar.jpg","components/Users/Users.tsx","components/Users/UsersContainer.tsx","Login/LoginForm.tsx","Login/Login.tsx","App.tsx","index.tsx","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My Posts/MyPosts.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","userId","post","delete","loginAPI","email","password","rememberMe","profileAPI","status","put","image","ADD_POST","SET_USER_PROFILE","SET_NEW_STATUS","initialState","posts","id","message","likesCount","profile","setUserProfile","type","changeStatusAC","newStatus","ADD_NEW_MESSAGE","dialogs","name","messages","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","follow","unfollow","toggleIsFetching","toggleIsFollowingProgress","isFollowing","userID","SET_USER_DATA","SET_CAPTCHA","login","isAuth","captcha","undefined","SetAuthUserDataAC","authThunkCreator","dispatch","resultCode","setCaptchaThunkCreator","captch","url","reducers","combineReducers","profilePage","state","action","newPostBody","dialogPage","body","newMessageBody","usersPage","map","u","followed","totalCount","filter","auth","stateCopy","form","formReducer","store","createStore","applyMiddleware","thunk","window","Navbar","className","s","nav","item","to","activeClassName","active","News","Helmet","content","Music","Settings","Header","props","header","src","alt","loginBlock","logout","onClick","HeaderAPIContainer","this","logoutThunkCreator","React","Component","HeaderContainer","connect","Preloader","style","preloader","loader","backgroundColor","ProfileStatus","editMode","value","activateEditMode","setState","deactivateEditMode","updateStatus","ChangeStatus","e","newValue","currentTarget","prevProps","prevState","onBlur","onChange","autoFocus","onDoubleClick","ProfileInfo","image_block","description_block","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","vk","github","instagram","twitter","mainLink","website","youtube","Post","requiredField","maxLengthCreator","maxLength","length","Textarea","input","meta","showError","touched","error","formControl","Input","maxLength10","MyPostsFormRedux","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","validate","MyPostsContainer","addPostActionCreator","postsElements","p","posts_block","formData","Profile","document","title","mapStateToProps","withAuthRedirect","restProps","ProfileContainer","Number","match","params","autorizedUserID","getMeProfileThunkCreator","getMeStatusThunkCreator","createPhotoThunkCreator","updateStatusThunkCreator","compose","withRouter","DialogItem","dialog","Message","maxLength100","AddMessageFormReduxForm","dialogsPage","sendMessage","newMessage","dialogsElements","d","messagesElements","m","dialogs_items","Users","onPageChanged","unfollowUsersThunkCreator","followUsersThunkCreator","pagesCount","Math","ceil","pages","i","push","now","allUser","titleUsers","selectedPage","numberPage","user","small","userPhoto","disabled","some","main","location","UsersComponent","pageNumber","getUsersThunkCreator","setCurrentPage","items","LoginReduxForm","formSummaryError","loginThunkCreator","stopSubmit","_error","App","path","render","DialogsContainer","UsersContainer","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.78de9a7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2dvkO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__SCDgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__371Kq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogs_items\":\"Dialogs_dialogs_items__16PrC\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__WE9ql\",\"error\":\"FormsControl_error__eY5EU\",\"formSummaryError\":\"FormsControl_formSummaryError__3Uy6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"Users_user__1dQYj\",\"image\":\"Users_image__2Sl9a\",\"main\":\"Users_main__103N1\",\"titleUsers\":\"Users_titleUsers__l2wTc\",\"selectedPage\":\"Users_selectedPage__J63sh\",\"numberPage\":\"Users_numberPage__1entT\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '81cb1eba-d16e-447b-b8c3-7c17cf6feee4'\n    }\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number){\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    followUser(userId: number){\n        return instance.post(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    unfollowUser(userId: number){\n        return instance.delete(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    }\n}\n\nexport const loginAPI = {\n    me(){\n        return instance.get(`auth/me`)\n            .then(response => {\n                return response.data\n            })\n    },\n    login(email: string, password: string, rememberMe: boolean){\n        return instance.post(`auth/login`, {email, password, rememberMe})\n    },\n    logout(){\n        return instance.delete(`auth/login`)\n            .then(response => {\n                return response.data\n            })\n    },\n    getCaptcha(){\n        return instance.get(`security/get-captcha-url`)\n            .then(response => {\n                return response\n        })\n    }\n}\n\nexport const profileAPI = {\n    getMeProfile(userId: number){\n        return instance.get(`profile/` + userId)\n    },\n    getMeStatus(userId: number){\n        return instance.get(`profile/status/` + userId)\n    },\n    updateStatus(status: string){\n        return instance.put(`profile/status/`, {status})\n    },\n    createPhoto(){\n        return instance.put(`/profile/photo`,{image:'https://static.wikia.nocookie.net/mrrobot/images/5/5a/MRPoster.jpg/revision/latest?cb=20160625030409'})\n    }\n}\n\n\n","import React from 'react'\nimport {\n    FollowAT,\n    SetCurrentPageAT,\n    SetTotalCountAT,\n    SetUsersAT,\n    ToggleIsFetchingAT, ToggleIsFollowingProgressAT,\n    UnfollowAT\n} from './usersReduser';\nimport {PostType} from './redux-store';\nimport {profileAPI} from '../api/api';\nimport {NewMessageActionType} from './dialogsReduser';\n\nexport const ADD_POST = 'ADD-POST'\nexport const SET_USER_PROFILE = 'SET_USER_PROFILE'\nexport const SET_NEW_STATUS = 'SET_NEW_STATUS'\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 5},\n        {id: 2, message: 'It\\'s my first post', likesCount: 23}\n    ],\n    profile: null,\n    status: ''\n}\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    profile: UserProfilePage | null\n    status: string\n}\n\nexport type UserProfilePage = {\n    aboutMe: string\n    contacts: Contacts\n    lookingForAJob: boolean\n    lookingForAJobDescription: string | null\n    fullName: string | null\n    userId: number\n    photos: Photos\n}\n\ntype Contacts = {\n    facebook: string | null\n    website: string | null\n    vk: string | null\n    twitter: string | null\n    instagram: string | null\n    youtube: string | null\n    github: string | null\n    mainLink: string | null\n}\n\ntype Photos = {\n    small: string | undefined\n    large: string | undefined\n}\n\nexport type AddPostActionType = {\n    type: 'ADD-POST'\n    newPostBody: string\n}\n\nexport type setUserProfileAT = {\n    type: 'SET_USER_PROFILE'\n    profile: any\n}\n\nexport type setNewStatusAT = {\n    type: 'SET_NEW_STATUS'\n    newStatus: string\n}\n\nexport type ActionType =\n    AddPostActionType\n    | NewMessageActionType\n    | FollowAT\n    | UnfollowAT\n    | SetUsersAT\n    | SetCurrentPageAT\n    | SetTotalCountAT\n    | ToggleIsFetchingAT\n    | setUserProfileAT\n    | ToggleIsFollowingProgressAT\n    | setNewStatusAT\n\nexport const profileReduser = (state: ProfilePageType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ADD_POST: {\n            return {\n                ...state,\n                posts: [...state.posts, {id: 3, message: action.newPostBody, likesCount: 0}]\n            }\n        }\n        case SET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case SET_NEW_STATUS:\n            return {\n                ...state,\n                status: action.newStatus\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const addPostActionCreator = (newPostBody: string): AddPostActionType => ({type: ADD_POST, newPostBody})\n\nexport const setUserProfile = (profile: any): setUserProfileAT => ({\n    type: SET_USER_PROFILE, profile\n})\n\nexport const changeStatusAC = (newStatus: string): setNewStatusAT => ({\n    type: SET_NEW_STATUS, newStatus\n})\n\n\nexport const getMeProfileThunkCreator = (userId: number) => {\n    return (dispatch: any) => {\n        profileAPI.getMeProfile(userId).then(response => {\n            dispatch(setUserProfile(response.data))\n        })\n    }\n}\n\nexport const getMeStatusThunkCreator = (userId: number) => {\n    return (dispatch: any) => {\n        profileAPI.getMeStatus(userId).then(response => {\n            dispatch(changeStatusAC(response.data))\n        })\n    }\n}\n\nexport const updateStatusThunkCreator = (status: string) => {\n    return (dispatch: any) => {\n        profileAPI.updateStatus(status).then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(changeStatusAC(status))\n            }\n        })\n    }\n}\n\nexport const createPhotoThunkCreator = () => {\n    return (dispatch: any) => {\n        profileAPI.createPhoto().then(response => {\n        })\n    }\n}","import React from 'react'\nimport {ActionType} from './profileReduser';\nimport {DialogPageType} from './redux-store';\n\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'\n\nexport type NewMessageActionType = {\n    type: 'ADD-NEW-MESSAGE'\n    newMessageBody: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Lizok'},\n        {id: 2, name: 'Oksik'},\n        {id: 3, name: 'Dimon'},\n        {id: 4, name: 'Denis'},\n        {id: 5, name: 'Masha'}\n    ],\n    messages: [\n        {id: 1, message: 'Hello'},\n        {id: 2, message: 'How are you?'},\n        {id: 3, message: 'What is your name?'}\n    ]\n}\n\nexport const dialogsReduser = (state: DialogPageType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ADD_NEW_MESSAGE: {\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 4, message: body}]\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const addNewMessageActionCreator = (newMessageBody: string): NewMessageActionType => ({\n    type: ADD_NEW_MESSAGE,\n    newMessageBody: newMessageBody\n})","import React from 'react'\nimport {ActionType} from './profileReduser';\nimport {usersAPI} from '../api/api';\nimport {futimes} from 'fs';\n\nexport type FollowAT = {\n    type: 'FOLLOW'\n    userId: number\n}\n\nexport type UnfollowAT = {\n    type: 'UNFOLLOW'\n    userId: number\n}\n\nexport type SetUsersAT = {\n    type: 'SET_USERS'\n    users: Array<UserType>\n}\n\nexport type SetCurrentPageAT = {\n    type: 'SET_CURRENT_PAGE'\n    currentPage: number\n}\n\nexport type SetTotalCountAT = {\n    type: 'SET_TOTAL_COUNT'\n    totalCount: number\n}\n\nexport type ToggleIsFetchingAT = {\n    type: 'TOGGLE_IS_FETCHING'\n    isFetching: boolean\n}\n\nexport type ToggleIsFollowingProgressAT = {\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS'\n    isFollowing: boolean\n    userID: number\n}\n\n\nexport const FOLLOW = 'FOLLOW'\nexport const UNFOLLOW = 'UNFOLLOW'\nexport const SET_USERS = 'SET_USERS'\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nexport const SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\nexport const TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\ntype usersLocation = {\n    city: string\n    country: string\n}\nexport type UserType = {\n    id: number,\n    photos: PhotosType\n    followed: boolean,\n    name: string,\n    status: string\n}\ntype PhotosType = {\n    small: string | null\n    large: string | null\n}\nexport type UsersPageType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: number[]\n}\n\nlet initialState: UsersPageType = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: []\n}\n\nexport const usersReduser = (state: UsersPageType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\n            }\n        case SET_USERS:\n            return {...state, users: [...action.users]}\n        case SET_CURRENT_PAGE:\n            return {...state, currentPage: action.currentPage}\n        case SET_TOTAL_COUNT:\n            return {...state, totalUsersCount: action.totalCount}\n        case TOGGLE_IS_FETCHING:\n            return {...state, isFetching: action.isFetching}\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFollowing\n                    ?  [...state.followingInProgress,  action.userID]\n                    : state.followingInProgress.filter(id => id != action.userID)}\n        default:\n            return state;\n    }\n}\n\nexport const follow = (userId: number): FollowAT => ({type: FOLLOW, userId})\n\nexport const unfollow = (userId: number): UnfollowAT => ({type: UNFOLLOW, userId})\n\nexport const setUsers = (users: Array<UserType>): SetUsersAT => ({type: SET_USERS, users})\n\nexport const setCurrentPage = (currentPage: number): SetCurrentPageAT => ({type: SET_CURRENT_PAGE, currentPage})\n\nexport const setTotalCount = (totalCount: number): SetTotalCountAT => ({type: SET_TOTAL_COUNT, totalCount})\n\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingAT => ({type: TOGGLE_IS_FETCHING, isFetching})\n\nexport const toggleIsFollowingProgress = (isFollowing: boolean, userID: number): ToggleIsFollowingProgressAT => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFollowing, userID})\n\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\n    return (dispatch: any) => {\n        dispatch(toggleIsFetching(true))\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\n            dispatch(setUsers(data.items))\n            dispatch(setTotalCount(data.totalCount))\n            dispatch(toggleIsFetching(false))\n        })\n    }\n}\n\nexport const unfollowUsersThunkCreator = (userId: number) => {\n    return (dispatch: any) => {\n        dispatch(toggleIsFollowingProgress(true, userId))\n        usersAPI.unfollowUser(userId).then(data => {\n            if (data.resultCode == 0) {\n                dispatch(unfollow(userId))\n            }\n            dispatch(toggleIsFollowingProgress(false, userId))\n        })\n    }\n}\n\nexport const followUsersThunkCreator = (userId: number) => {\n    return (dispatch: any) => {\n        dispatch(toggleIsFollowingProgress(true, userId))\n        usersAPI.followUser(userId).then(data => {\n            if (data.resultCode == 0) {\n                dispatch(follow(userId))\n            }\n            dispatch(toggleIsFollowingProgress(false, userId))\n        })\n    }\n}","import {loginAPI} from '../api/api';\nimport {stopSubmit} from 'redux-form';\n\n\nconst SET_USER_DATA = 'SET_USER_DATA'\nconst SET_CAPTCHA = 'SET_CAPTCHA'\n\ntype SetUserDataAT = {\n    type: 'SET_USER_DATA'\n    data: AuthStateType\n}\n\ntype SetCaptchaAT = {\n    type: 'SET_CAPTCHA'\n    captch: string\n}\n\ntype AuthStateType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n    captcha?: string\n}\n\ntype ActionType = SetUserDataAT | SetCaptchaAT\n\nlet initialState: AuthStateType = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captcha: undefined\n}\n\nexport const authReducer = (state: AuthStateType = initialState, action: ActionType): AuthStateType => {\n    const stateCopy = {...state}\n\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...stateCopy,\n                ...action.data\n            }\n        case SET_CAPTCHA:\n            return {\n                ...stateCopy,\n                captcha: action.captch\n            }\n        default:\n            return state\n    }\n}\n\nexport const SetAuthUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetUserDataAT => ({type: SET_USER_DATA, data: {userId, email, login, isAuth}})\n\nexport const SetCaptchsAC = (captch: string): SetCaptchaAT => ({type: SET_CAPTCHA, captch})\n\nexport const authThunkCreator = () => {\n    return (dispatch: any) => {\n        loginAPI.me().then(data => {\n            if(data.resultCode === 0){\n                let {id, login, email} = data.data\n                dispatch(SetAuthUserDataAC(id, email, login, true))\n            }\n        })\n    }\n}\n\nexport const loginThunkCreator = (email: string, password: string, rememberMe: boolean) => {\n    return (dispatch: any) => {\n        loginAPI.login(email, password, rememberMe).then(response => {\n            if(response.data.resultCode === 0){\n                dispatch(authThunkCreator())\n            }else if(response.data.resultCode === 10){\n                dispatch(setCaptchaThunkCreator())\n            }else {\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some Error'\n                dispatch(stopSubmit('login', {_error: message}))\n            }\n        })\n    }\n}\n\nexport const setCaptchaThunkCreator = () => {\n    return(dispatch: any) => {\n        loginAPI.getCaptcha().then(response =>{\n            if(response.data.resultCode === 0){\n                dispatch(SetCaptchsAC(response.data.url))\n            }\n        })\n    }\n}\n\nexport const logoutThunkCreator = () => {\n    return (dispatch: any) => {\n        loginAPI.logout().then(data => {\n            if(data.resultCode === 0){\n                dispatch(SetAuthUserDataAC(null, null, null, false))\n            }\n        })\n    }\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {profileReduser, UserProfilePage} from './profileReduser';\nimport {dialogsReduser} from './dialogsReduser';\nimport {usersReduser} from './usersReduser';\nimport {authReducer} from './authReduser';\nimport thunk from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\n\nlet reducers = combineReducers({\n    profilePage: profileReduser,\n    dialogPage: dialogsReduser,\n    usersPage: usersReduser,\n    auth: authReducer,\n    form: formReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducers>\n\nexport let store = createStore(reducers, applyMiddleware(thunk))\n\n// @ts-ignore\nwindow.store = store\n\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogPage: DialogPageType\n}\n\nexport type DialogPageType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n}\n\ntype DialogType = {\n    id: number\n    name: string\n}\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string\n    profile: UserProfilePage\n}\n\nexport type PostType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nexport type MessageType = {\n    id: number\n    message: string\n}\n\n","import s from './Navbar.module.css'\nimport { NavLink } from 'react-router-dom';\n\nexport function Navbar() {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\n            </div>\n            <div className={`${s.item} ${s.active}`}>\n                <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\n            </div>\n        </nav>\n    )\n}\n\n\n","import {Helmet} from 'react-helmet';\nimport React from 'react';\n\nexport function News() {\n    return (\n        <div>\n            <Helmet>\n                <title>News</title>\n                <meta name=\"description\" content=\"News application\" />\n            </Helmet>\n            News\n        </div>\n    )\n}","import {Helmet} from 'react-helmet';\nimport React from 'react';\n\nexport function Music() {\n    return (\n        <div>\n            <Helmet>\n                <title>Music</title>\n                <meta name=\"description\" content=\"Music application\" />\n            </Helmet>\n            Music\n        </div>\n    )\n}\n\n\n","import {Helmet} from 'react-helmet';\nimport React from 'react';\n\nexport function Settings() {\n    return (\n        <div>\n            <Helmet>\n                <title>Settings</title>\n                <meta name=\"description\" content=\"Settings application\" />\n            </Helmet>\n            Settings\n        </div>\n    )\n}","import s from './Header.module.css'\nimport { NavLink } from 'react-router-dom';\nimport {ReactNode} from 'react';\n\ntype HeaderPropsType = {\n    children?: ReactNode\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\n\nexport function Header(props: HeaderPropsType) {\n    return (\n        <header className={s.header}>\n            <div className={s.image}>\n                <img\n                     src=\"https://art.pixilart.com/efa94fefad71c75.png\"\n                     alt=\"\"/>\n            </div>\n            <div className={s.loginBlock}>\n                {props.isAuth\n                    ? <div className={s.logout}>{props.login} - <button onClick={props.logout}>Logout</button></div>\n                    : <NavLink className={s.login} to={'/login'}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}\n\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {authThunkCreator, logoutThunkCreator, SetAuthUserDataAC} from '../../redux/authReduser';\nimport {loginAPI} from '../../api/api';\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n}\n\nclass HeaderAPIContainer extends React.Component<any, any> {\n    componentDidMount() {\n        this.props.authThunkCreator(this.props.isAuth)\n    }\n\n    render() {\n        return <Header {...this.props} isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logoutThunkCreator}/>\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport const HeaderContainer = connect(mapStateToProps, {\n    SetAuthUserDataAC, authThunkCreator, logoutThunkCreator\n})(HeaderAPIContainer)\n\n","export default __webpack_public_path__ + \"static/media/loader.70c0e9b1.gif\";","import loader from '../../../assets/loader.gif';\nimport React from 'react';\nimport style from './Preloader.module.css'\n\nexport function Preloader() {\n    return (\n        <div className={style.preloader}>\n            <img src={loader} style={{backgroundColor: 'white'}}/>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport s from './ProfileStatus.module.css'\n\ntype ProfileStatusPropsType = {\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n}\n\nexport class ProfileStatus extends React.Component<any, any> {\n    state = {\n        editMode: false,\n        value: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateStatus(this.state.value)\n    }\n\n    ChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        let newValue = e.currentTarget.value\n        this.setState({\n           value: newValue\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>) {\n        if(prevProps.status !== this.props.status){\n            this.setState({\n                status: this.props.status\n            })\n        }\n    }\n\n    render(){\n        return this.state.editMode ?\n            <div onBlur={this.deactivateEditMode}>\n                <input value={this.state.value} onChange={this.ChangeStatus || '----'} autoFocus/>\n            </div>\n            : <div onDoubleClick={this.activateEditMode} className={s.status}>\n                <span>{this.state.value}</span>\n            </div>\n    }\n}","import s from './ProfileInfo.module.css'\nimport {UserProfilePage} from '../../../redux/profileReduser';\nimport {Preloader} from '../../common/Preloader/Preloader';\nimport {ProfileStatus} from './ProfileStatus';\n\ntype ProfileInfoPropsType = {\n    profile: UserProfilePage | null\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n}\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n    if(!props.profile){\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.image_block}>\n                <img\n                    src=\"https://www.yashcreations.com/wp-content/uploads/2016/08/web-development-Banner.jpg\"\n                    alt=\"\"/>\n            </div>\n            <div className={s.description_block}>\n                <img src={props.profile.photos.large}/>\n                <div>\n                    <h1>{props.profile.fullName}</h1>\n                    <p>{props.profile.aboutMe}</p>\n                    <p>{props.profile.lookingForAJob ? 'Шукаю роботу ' : 'Не шукаю роботу '}<span>({props.profile.lookingForAJobDescription})</span></p>\n                    <div>Contacts:</div>\n                    <div>\n                        <p>{props.profile.contacts.facebook}</p>\n                        <p>{props.profile.contacts.vk}</p>\n                        <p>{props.profile.contacts.github}</p>\n                        <p>{props.profile.contacts.instagram}</p>\n                        <p>{props.profile.contacts.twitter}</p>\n                        <p>{props.profile.contacts.mainLink}</p>\n                        <p>{props.profile.contacts.website}</p>\n                        <p>{props.profile.contacts.youtube}</p>\n                    </div>\n                </div>\n            </div>\n            <ProfileStatus status={props.status} changeStatusAC={props.changeStatusAC} updateStatus={props.updateStatus}/>\n        </div>\n    )\n}\n\n\n","import s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n    id: number\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n\n        <div className={s.item}>\n            <img\n                src='https://www.liveabout.com/thmb/pElYdfgKoydmsrso8fiU1wd-jO0=/1449x1449/smart/filters:no_upscale()/Avatar_12_HR_01-56a00ca93df78cafda9fd17c.jpg'/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n\n    )\n}\n\n\n","export const requiredField = (value: any) => {\n    if(value) return undefined\n\n    return 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\n\n    return undefined\n}\n\n","import s from './FormsControl.module.css'\n\nexport const Textarea: React.FC<any> = ({input, meta, ...props}) => {\n    const showError = meta.touched && meta.error && s.error\n\n    return (\n        <div className={s.formControl + ' ' + (showError ? s.error : '')}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {showError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Input: React.FC<any> = ({input, meta, ...props}) => {\n    const showError = meta.touched && meta.error && s.error\n\n    return (\n        <div className={s.formControl + ' ' + (showError ? s.error : '')}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {showError && <span>{meta.error}</span>}\n        </div>\n    )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\nimport {Textarea} from '../../common/FormsControls/FormsControl';\n\nexport type MyPostsFormType = {\n    newPostBody: string\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nexport const MyPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your post'} name={'newPostBody'} component={Textarea}\n                       validate={[requiredField, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n    )\n}\n\nexport const MyPostsFormRedux = reduxForm<MyPostsFormType>({form: 'profileMyPostsForm'})(MyPostsForm)","import React from 'react'\nimport {addPostActionCreator} from '../../../redux/profileReduser';\nimport {MyPosts} from './MyPosts';\nimport {AppStateType, PostType} from '../../../redux/redux-store';\nimport {connect} from 'react-redux';\n\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPostActionCreator})(MyPosts);\n\n\n","import React, {ChangeEvent} from 'react'\nimport s from './MyPosts.module.css'\nimport {Post} from './Post/Post';\nimport {PostType} from '../../../redux/redux-store';\nimport {MyPostsFormRedux, MyPostsFormType} from './MyPostsForm.';\n\n\ntype MyPostsType = {\n    addPostActionCreator: (newPostBody: string) => void\n    posts: Array<PostType>\n}\n\nexport function MyPosts(props: MyPostsType) {\n    const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} id={p.id}/>)\n\n    const onSubmit = (formData: MyPostsFormType) => {\n        props.addPostActionCreator(formData.newPostBody)\n    }\n\n    return (\n        <div className={s.posts_block}>\n            <h3>My posts</h3>\n            <MyPostsFormRedux onSubmit={onSubmit}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\n\n","import s from './Profile.module.css'\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport React, {ReactNode} from 'react';\nimport {MyPostsContainer} from './My Posts/MyPostsContainer';\nimport {Helmet} from 'react-helmet';\nimport {UserProfilePage} from '../../redux/profileReduser';\n\ntype ProfilePropsType = {\n    children?: ReactNode\n    profile: UserProfilePage | null\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n}\n\nexport function Profile(props: ProfilePropsType) {\n    document.title = 'Profile'\n\n    return (\n        <div>\n            <Helmet>\n                <title>Profile</title>\n                <meta name=\"description\" content=\"Profile application\"/>\n            </Helmet>\n            <ProfileInfo profile={props.profile} status={props.status} changeStatusAC={props.changeStatusAC}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\n\n","import {Redirect} from 'react-router-dom';\nimport React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToProps = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType):MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToProps) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Profile} from './Profile';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {\n    changeStatusAC, createPhotoThunkCreator,\n    getMeProfileThunkCreator,\n    getMeStatusThunkCreator,\n    setUserProfile, updateStatusThunkCreator,\n    UserProfilePage\n} from '../../redux/profileReduser';\nimport {withRouter} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router'\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\nimport {compose} from 'redux';\n\ntype PathParamsType = {\n    userId: string | undefined\n}\ntype MapStateToPropsType = {\n    profile: UserProfilePage | null\n    status: string\n    autorizedUserID: any\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    setUserProfile: (profile: UserProfilePage) => void\n    changeStatusAC: (newStatus: string) => void\n    getMeStatusThunkCreator: (userId: number) => void\n    updateStatusThunkCreator: (status: string) => void\n    createPhotoThunkCreator: any\n}\ntype thunkPropsType = {\n    getMeProfileThunkCreator: (userId: number) => void\n}\ntype ProfileAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType & thunkPropsType\n\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIContainerPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = Number(this.props.match.params.userId)\n        if (!userId) {\n            userId = this.props.autorizedUserID\n        }\n        this.props.getMeProfileThunkCreator(userId)\n        this.props.getMeStatusThunkCreator(userId)\n        this.props.createPhotoThunkCreator()\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>Profile</title>\n                    <meta name=\"description\" content=\"Profile application\"/>\n                </Helmet>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                         changeStatusAC={this.props.changeStatusAC} updateStatus={this.props.updateStatusThunkCreator}/>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    autorizedUserID: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        setUserProfile, getMeProfileThunkCreator, changeStatusAC,\n        getMeStatusThunkCreator, updateStatusThunkCreator,createPhotoThunkCreator\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n","import s from './../Dialogs.module.css'\nimport {NavLink} from 'react-router-dom';\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\n\nexport function DialogItem(props: DialogItemPropsType) {\n    return (\n        <div className={`${s.dialog} ${s.active}`}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}","import s from './../Dialogs.module.css'\n\ntype MessageType = {\n    message: string\n    id: number\n}\n\nexport function Message(props: MessageType) {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../common/FormsControls/FormsControl';\nimport {maxLengthCreator, requiredField} from '../../utils/validators/validators';\n\nexport type AddMessageFormType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} name={'newMessageBody'} component={Textarea}\n                       validate={[requiredField, maxLength100]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageFormReduxForm = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react'\nimport {addNewMessageActionCreator} from '../../redux/dialogsReduser';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType, DialogPageType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\n\n\ntype mapStateToPropsType = {\n    dialogsPage: DialogPageType\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessage: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogPage\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessage: string) => {\n            dispatch(addNewMessageActionCreator(newMessage))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)","import React, {ChangeEvent} from 'react'\nimport s from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem';\nimport {Message} from './Message/Message';\nimport {Helmet} from 'react-helmet';\nimport { DialogPageType } from '../../redux/redux-store';\nimport {AddMessageFormReduxForm, AddMessageFormType} from './AddMessageForm.';\n\n\ntype DialogsPropsType = {\n    dialogsPage: DialogPageType\n    sendMessage: (newMessage: string) => void\n}\n\nexport function Dialogs(props: DialogsPropsType) {\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\n\n    const onSubmit = (formData: AddMessageFormType) => {\n        props.sendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <Helmet>\n                <title>Dialogs</title>\n                <meta name=\"description\" content=\"Dialogs application\" />\n            </Helmet>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageFormReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/avatar.e5117e8e.jpg\";","import {unfollowUsersThunkCreator, UserType} from '../../redux/usersReduser';\nimport s from './Users.module.css';\nimport userPhoto from '../../assets/images/avatar.jpg'\nimport React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {NavLink} from 'react-router-dom';\nimport {usersAPI} from '../../api/api';\n\ntype UsersPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    onPageChanged: (pageNumber: number) => void\n    followingInProgress: number[]\n    toggleIsFollowingProgress: (isFollowing: boolean, userId: number) => void\n    unfollowUsersThunkCreator: (userId: number) => void\n    followUsersThunkCreator: (userId: number) => void\n}\n\nexport const Users: React.FC<UsersPropsType> = ({\n                                                    users,\n                                                    pageSize,\n                                                    totalUsersCount,\n                                                    currentPage,\n                                                    follow,\n                                                    onPageChanged,\n                                                    followingInProgress,\n                                                    toggleIsFollowingProgress,\n                                                    unfollowUsersThunkCreator,\n                                                    followUsersThunkCreator\n                                                }) => {\n\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\n\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let now = currentPage\n\n    return (\n        <div className={s.allUser}>\n            <Helmet>\n                <title>Users</title>\n                <meta name=\"description\" content=\"Users application\"/>\n            </Helmet>\n            <div className={s.titleUsers}>Users</div>\n            <div>\n                {pages.map(p => {\n                        if ((p < now + 5 && p > now - 5) ||\n                            p === 1 || p === pages.length\n                        ) {\n                            return <span onClick={() => onPageChanged(p)}\n                                         className={currentPage === p ? s.selectedPage : s.numberPage}>{p}</span>\n                        }\n                    }\n                )}\n            </div>\n            {users.map((u: UserType) => {\n                return <div className={s.user}>\n                    <div className={s.image}>\n                        <NavLink to={'/profile/' + u.id}>\n                            <img\n                                src={u.photos.small != null ? u.photos.small : userPhoto}\n                                alt=\"\"/>\n                        </NavLink>\n                        {\n                            u.followed\n                            ? <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\n                                unfollowUsersThunkCreator(u.id)}}>Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\n                                followUsersThunkCreator(u.id)}}>Follow</button>\n                        }\n                    </div>\n                    <div className={s.main}>\n                        <div>\n                            <div>{u.name}</div>\n                            <div>{u.status}</div>\n                        </div>\n                        <div className={s.location}>\n                            <div> {'u.location.city'},</div>\n                            <div>{'u.location.country'}</div>\n                        </div>\n                    </div>\n                </div>\n            })}\n        </div>\n    )\n}","import {connect, useDispatch} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {\n    follow, followUsersThunkCreator,\n    getUsersThunkCreator,\n    setCurrentPage,\n    setTotalCount,\n    setUsers,\n    toggleIsFetching,\n    toggleIsFollowingProgress,\n    unfollow, unfollowUsersThunkCreator,\n    UserType\n} from '../../redux/usersReduser';\nimport React from 'react';\nimport {Users} from './Users';\nimport {Preloader} from '../common/Preloader/Preloader';\nimport {usersAPI} from '../../api/api';\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\nimport {compose} from 'redux';\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: number[]\n}\n\n\ntype UsersAPIComponentPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setCurrentPage: (currentPage: number) => void\n    isFetching: boolean\n    followingInProgress: number[]\n    toggleIsFollowingProgress: (isFollowing: boolean, userId: number) => void\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\n    unfollowUsersThunkCreator: (userId: number) => void\n    followUsersThunkCreator: (userId: number) => void\n}\n\ntype UsersStateType = {}\n\nexport class UsersComponent extends React.Component<UsersAPIComponentPropsType, UsersStateType> {\n    componentDidMount() {\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users users={this.props.users} pageSize={this.props.pageSize} follow={this.props.follow}\n                   unfollow={this.props.unfollow} currentPage={this.props.currentPage}\n                   totalUsersCount={this.props.totalUsersCount} onPageChanged={this.onPageChanged}\n                   followingInProgress={this.props.followingInProgress}\n                   toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\n                   unfollowUsersThunkCreator={this.props.unfollowUsersThunkCreator}\n                   followUsersThunkCreator={this.props.followUsersThunkCreator}/>\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        follow, unfollow, setCurrentPage, toggleIsFollowingProgress, getUsersThunkCreator, unfollowUsersThunkCreator,\n        followUsersThunkCreator\n    }),\n    withAuthRedirect\n)(UsersComponent)","import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {Input} from '../components/common/FormsControls/FormsControl';\nimport {requiredField} from '../utils/validators/validators';\nimport s from '../components/common/FormsControls/FormsControl.module.css'\n\nexport type FormDataType = {\n    login: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const LoginForm: React.FC<any> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field placeholder={'Login'} name={'login'} component={Input} validate={[requiredField]}/>\n        </div>\n        <div>\n            <Field type={'password'} placeholder={'Password'} name={'password'} component={Input} validate={[requiredField]}/>\n        </div>\n        <div>\n            <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\n        </div>\n        {props.error ? <div className={s.formSummaryError}>{props.error}</div> : ''}\n        <div>\n            <button>Login</button>\n        </div>\n    </form>\n}\n\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)","import React from 'react';\nimport {FormDataType, LoginReduxForm} from './LoginForm';\nimport {connect} from 'react-redux';\nimport {loginThunkCreator} from '../redux/authReduser';\nimport {Redirect} from 'react-router-dom';\nimport {AppStateType} from '../redux/redux-store';\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    loginThunkCreator: (email: string, password: string, rememberMe: boolean) => void\n}\n\ntype LoginPropsType = mapStateToPropsType & MapDispatchToPropsType\n\nconst Login: React.FC<LoginPropsType> = (props) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.loginThunkCreator(formData.login, formData.password, formData.rememberMe)\n    }\n\n    if (props.isAuth){\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, {loginThunkCreator})(Login)","import './App.css';\nimport {Navbar} from './components/Navbar/Navbar';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport {News} from './components/News/News';\nimport {Music} from './components/Music/Music';\nimport {Settings} from './components/Settings/Settings';\nimport {HeaderContainer} from './components/Header/HeaderContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\nimport Login from './Login/Login';\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/dialogs\"\n                           render={() => <DialogsContainer/>}/>\n                    <Route path=\"/profile/:userId?\"\n                           render={() => <ProfileContainer/> }/>\n                    <Route path=\"/news\" render={() => <News/>}/>\n                    <Route path=\"/music\" render={() => <Music/>}/>\n                    <Route path=\"/users\"\n                           render={() => <UsersContainer/>}/>\n                    <Route path=\"/settings\" render={() => <Settings/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;","import reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux-store'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"image\":\"Header_image__1zcEI\",\"login\":\"Header_login__3V3Qa\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description_block\":\"ProfileInfo_description_block__187mR\",\"image_block\":\"ProfileInfo_image_block__2czoV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_block\":\"MyPosts_posts_block__12W53\",\"posts\":\"MyPosts_posts__3ZUOo\"};"],"sourceRoot":""}